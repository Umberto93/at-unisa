{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/button-active-a6787d69.js","./node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js","./node_modules/@ionic/core/dist/esm/framework-delegate-4584ab5a.js","./node_modules/@ionic/core/dist/esm/spinner-configs-cd7845af.js","./node_modules/@ionic/core/dist/esm/haptic-27b3f981.js","./src/app/services/esse3/tax/tax.service.ts","./src/app/services/agendaweb/rooms/rooms.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACD;AACmE;;AAEvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAAa;AACtB;AACA;AACA;AACA,mEAAmE,qDAAoB;AACvF,kEAAkE,qDAAsB;AACxF;AACA;AACA,MAAM,6DAAkB;AACxB;AACA;AACA,GAAG;AACH;;AAE0C;;;;;;;;;;;;;AC/D1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,kCAAkC,MAAM,UAAU;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqF;;;;;;;;;;;;;ACtCrF;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;;;;;;;;;;;ACjCtD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,kCAAkC,sCAAsC;AACxE,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,kCAAkC,sCAAsC;AACxE,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;AC7GzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,GAAG;AACH;AACA,iBAAiB,iBAAiB;AAClC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEoI;;;;;;;;;;;;;;;;;;;;;ACzGtE;AACnB;AAEN;AAEsB;IAK9C,UAAU,SAAV,UAAU;IAInB,YACY,I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","file":"common-es2015.js","sourcesContent":["import { c as writeTask } from './index-e806d1f6.js';\nimport { createGesture } from './index-f49d994d.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-27b3f981.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\n\nexport { createButtonActiveGesture as c };\n","const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  if (el.componentOnReady) {\n    await el.componentOnReady();\n  }\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","const spinners = {\n  'bubbles': {\n    dur: 1000,\n    circles: 9,\n    fn: (dur, index, total) => {\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      const angle = 2 * Math.PI * index / total;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circles': {\n    dur: 1000,\n    circles: 8,\n    fn: (dur, index, total) => {\n      const step = index / total;\n      const animationDelay = `${(dur * step) - dur}ms`;\n      const angle = 2 * Math.PI * step;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circular': {\n    dur: 1400,\n    elmDuration: true,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 20,\n        cx: 48,\n        cy: 48,\n        fill: 'none',\n        viewBox: '24 24 48 48',\n        transform: 'translate(0,0)',\n        style: {}\n      };\n    }\n  },\n  'crescent': {\n    dur: 750,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 26,\n        style: {}\n      };\n    }\n  },\n  'dots': {\n    dur: 750,\n    circles: 3,\n    fn: (_, index) => {\n      const animationDelay = -(110 * index) + 'ms';\n      return {\n        r: 6,\n        style: {\n          'left': `${9 - (9 * index)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 17,\n        y2: 29,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines-small': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 12,\n        y2: 20,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Tax } from 'src/app/interfaces/tax';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TaxService {\r\n\r\n    readonly base = `${environment.esse3Api}/tasse-service-v1`;\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n    \r\n    /**\r\n     * Manipola la data restituita dal server creando un oggetto Date.\r\n     * \r\n     * @param str La data in formato stringa.\r\n     */\r\n    private toDate(str: string): Date {\r\n        return new Date(str.split('/').reverse().join('-'));\r\n    }\r\n\r\n    /**\r\n     * Recupera le informazioni sulle tasse pagate e da pagare relative allo specifico utente.\r\n     * \r\n     * @param persId L'id relativo alla specifica persona che viene restituito all'utente dopo \r\n     * aver effettuato l'autenticazione.\r\n     */\r\n    getTax(persId: number): Observable<Tax[]> {\r\n        return this.http.get<Tax[]>(`${this.base}/lista-fatture`, {\r\n            params: new HttpParams()\r\n                .set('persId', `${persId}`)\r\n        }).pipe(map((res: any) => {\r\n            let taxs: Tax[] = [];\r\n\r\n            res.forEach((el: any) => {\r\n                el.importoFattura > 0 && taxs.push({\r\n                    name: el.desMav1,\r\n                    amount: el.importoFattura,\r\n                    paymentDate: this.toDate(el.dataPagamento.split(' ')[0]),\r\n                    expirationDate: this.toDate(el.scadFattura.split(' ')[0]),\r\n                    payed: Boolean(el.pagatoFlg)\r\n                } as Tax);\r\n            });\r\n\r\n            return taxs;\r\n        }));\r\n    }\r\n\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Room } from 'src/app/interfaces/room';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RoomsService {\r\n\r\n    private readonly base = `${environment.easycourseApi}/AgendaStudenti/`;\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    private parseResponse(res: any): String {\r\n        return JSON.parse(res.split(';')[0]);\r\n    }\r\n\r\n    /**\r\n     * Preleva le combo di filtraggio per la selezione delle aule.\r\n     */\r\n    getRoomsFilter(): Observable<any> {\r\n        return this.http.get(`${this.base}/combo_call_new.php`, {\r\n            params: new HttpParams()\r\n                .set('sw', 'rooms_'),\r\n            responseType: 'text'\r\n        }).pipe(\r\n            map((res: any) => {\r\n                return this.parseResponse(res);\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Preleva l'elenco delle aule con le relative attività durante la specifica giornata.\r\n     * \r\n     * @param building Il codice dell'edificio.\r\n     * @param date La data.\r\n     */\r\n    getRooms(building: string, date: string): Observable<{ [id: string]: Room }> {\r\n        return this.http.get(`${this.base}/rooms_call_new.php`, {\r\n            params: new HttpParams()\r\n                .set('view', 'rooms')\r\n                .set('include', 'rooms')\r\n                .set('sede', building)\r\n                .set('date', date)\r\n        }).pipe(\r\n            map((res: any) => {\r\n                const events = res.events;\r\n                const rooms = {} as { [id: string]: Room };\r\n\r\n                events.forEach((event: any) => {\r\n                    if (!(event.CodiceAula in rooms)) {\r\n                        const room = {} as Room;\r\n\r\n                        room.name = event.NomeAula;\r\n                        room.code = event.CodiceAula;\r\n                        room.timeSlots = [{\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        }];\r\n                        room.events = [{\r\n                            name: event.nome.replace('<i class=\"fa fa-asterisk\" aria-hidden title=\"*\"></i>', '').trim(),\r\n                            type: event.tipo,\r\n                            profs: event.Utenti.map((user: any) => ({\r\n                                firstname: user.Nome,\r\n                                lastname: user.Cognome,\r\n                                mail: user.Mail\r\n                            })),\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        }];\r\n\r\n                        rooms[event.CodiceAula] = room;\r\n                    } else {\r\n                        rooms[event.CodiceAula].timeSlots.push({\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        });\r\n\r\n                        rooms[event.CodiceAula].events.push({\r\n                            name: event.nome.replace('<i class=\"fa fa-asterisk\" aria-hidden title=\"*\"></i>', '').trim(),\r\n                            type: event.tipo,\r\n                            profs: event.Utenti.map((user: any) => ({\r\n                                firstname: user.Nome,\r\n                                lastname: user.Cognome,\r\n                                mail: user.Mail\r\n                            })),\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return rooms;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Recupera l'elenco delle aule libere dell'ateneo.\r\n     * \r\n     * @param datefrom Ora di inizio della ricerca.\r\n     * @param dateto Ora di fine della ricerca.\r\n     */\r\n    getFreeRooms(datefrom: Date, dateto: Date): Observable<any> {\r\n        return this.http.get('http://localhost:8000/rooms/', {\r\n            params: new HttpParams()\r\n                .set('datefrom', datefrom.toISOString())\r\n                .set('dateto', dateto.toISOString())\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}