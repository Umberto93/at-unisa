{"version":3,"sources":["webpack:///src/app/services/esse3/profile/profile.service.ts","webpack:///src/app/pages/esse3/profile/profile.module.ts","webpack:///src/app/pages/esse3/profile/profile.page.scss","webpack:///src/app/pages/esse3/profile/profile.page.html","webpack:///src/app/pages/esse3/profile/profile.page.ts","webpack:///src/app/pages/esse3/profile/profile-routing.module.ts"],"names":["ProfileService","http","base","esse3Api","persId","get","pipe","res","details","birthCountry","naziNascDes","birthDate","getDate","dataNascita","birthDistrict","comuNascDes","birthProvince","provNascDes","citizenship","desCittadinanza","gender","sesso","firstname","nome","fiscalCode","codFis","lastname","cognome","residence","address","viaRes","district","comuResDes","nation","naziResDes","province","comuResSigla","phone","telRes","streetNumber","numCivRes","zipCode","capRes","domicile","viaDom","comuDomDes","naziDomDes","comuDomSigla","telDom","numCivDom","capDom","isResEqualDom","isEqual","dateTime","split","resObj","domObj","keysRes","Object","keys","forEach","key","providedIn","ProfilePageModule","imports","declarations","ProfilePage","userService","profileService","labels","activeIndex","isReady","slideOpts","autoHeight","spaceBetween","detailsTranslation","homeTranslation","getProfile","bind","getUser","profile","user","subscribe","event","target","value","parseInt","slides","slideTo","getActiveIndex","index","button","segment","children","click","selector","template","routes","path","component","ProfilePageRoutingModule","forChild","exports"],"mappings":"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","file":"profile-profile-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Profile } from 'src/app/interfaces/profile';\r\nimport { ProfileDetails } from 'src/app/interfaces/profile-details';\r\nimport { ProfileResidence } from 'src/app/interfaces/profile-residence';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n\r\n    private readonly base = `${environment.esse3Api}/anagrafica-service-v2`;\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n    \r\n    /**\r\n     * Preleva le informazioni relative all'anagrafica dell'utente.\r\n     * \r\n     * @param persId L'id relativo alla specifica persona che viene restituito all'utente dopo \r\n     * aver effettuato l'autenticazione.\r\n     */\r\n    getProfile(persId: number): Observable<Profile> {\r\n        return this.http.get<Profile>(`${this.base}/persone/${persId}`)\r\n            .pipe(map((res: any) => {\r\n\r\n                const details: ProfileDetails = {\r\n                    birthCountry: res.naziNascDes,\r\n                    birthDate: this.getDate(res.dataNascita),\r\n                    birthDistrict: res.comuNascDes,\r\n                    birthProvince: res.provNascDes,\r\n                    citizenship: res.desCittadinanza,\r\n                    gender: res.sesso,\r\n                    firstname: res.nome,\r\n                    fiscalCode: res.codFis,\r\n                    lastname: res.cognome,\r\n                };\r\n\r\n                const residence: ProfileResidence = {\r\n                    address: res.viaRes,\r\n                    district: res.comuResDes,\r\n                    nation: res.naziResDes,\r\n                    province: res.comuResSigla,\r\n                    phone: res.telRes,\r\n                    streetNumber: res.numCivRes,\r\n                    zipCode: res.capRes\r\n                };\r\n\r\n                const domicile: ProfileResidence = {\r\n                    address: res.viaDom,\r\n                    district: res.comuDomDes,\r\n                    nation: res.naziDomDes,\r\n                    province: res.comuDomSigla,\r\n                    phone: res.telDom,\r\n                    streetNumber: res.numCivDom,\r\n                    zipCode: res.capDom\r\n                }\r\n\r\n                const isResEqualDom: boolean = this.isEqual(residence, domicile);\r\n\r\n\r\n                return {\r\n                    details: details,\r\n                    residence: residence,\r\n                    isResEqualDom: isResEqualDom,\r\n                    ...(!isResEqualDom && { domicile: domicile })\r\n                } as Profile;\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Manipola la data restituita dal server, prelevando solo la porzione di interesse, eliminando\r\n     * l'orario.\r\n     * \r\n     * @param dateTime La data restituita in risposta dal server.\r\n     */\r\n    private getDate(dateTime: string): String {\r\n        return dateTime.split(' ')[0];\r\n    }\r\n\r\n    /**\r\n     * Il metodo ritorna true se la residenza e il domicilio coincidono.\r\n     * \r\n     * @param resObj L'oggetto residenza.\r\n     * @param domObj L'oggetto domicilio.\r\n     */\r\n    private isEqual(resObj: ProfileResidence, domObj: ProfileResidence): boolean {\r\n        const keysRes = Object.keys(resObj);\r\n\r\n        keysRes.forEach((key: any) => {\r\n            if (resObj[key] !== domObj[key]) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ProfilePageRoutingModule } from './profile-routing.module';\r\n\r\nimport { ProfilePage } from './profile.page';\r\nimport { UtilityModule } from '../../utility/utility.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        ProfilePageRoutingModule,\r\n        UtilityModule\r\n    ],\r\n    declarations: [ProfilePage]\r\n})\r\nexport class ProfilePageModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9maWxlLnBhZ2Uuc2NzcyJ9 */\";","export default \"<ion-content class=\\\"page-content\\\">\\n    <app-refresher [refreshCallback]=\\\"getProfile\\\"></app-refresher>\\n    <div class=\\\"flex flex-direction-column\\\">\\n        <app-header>\\n            <ion-toolbar>\\n                <ion-title class=\\\"page-title\\\">Profilo</ion-title>\\n            </ion-toolbar>\\n            <ion-toolbar class=\\\"segment-toolbar\\\">\\n                <ion-segment\\n                    [value]=\\\"activeIndex\\\"\\n                    (ionChange)=\\\"slideTo($event)\\\"\\n                    swipeGesture=\\\"false\\\"\\n                >\\n                    <ion-segment-button\\n                        *ngFor=\\\"let label of labels; index as i\\\"\\n                        [value]=\\\"i\\\"\\n                    >\\n                        <ion-label>{{label}}</ion-label>\\n                    </ion-segment-button>\\n                </ion-segment>\\n            </ion-toolbar>\\n        </app-header>\\n        <div class=\\\"page-main\\\">\\n            <ion-slides\\n                *ngIf=\\\"isReady\\\"\\n                (ionSlideWillChange)=\\\"setActiveIndex()\\\"\\n                [options]=\\\"slideOpts\\\"\\n            >\\n                <ion-slide>\\n                    <ion-list class=\\\"app-list\\\">\\n                        <ion-item *ngFor=\\\"let item of detailsTranslation | keyvalue: noSort\\\">\\n                            <ion-label>\\n                                <h3>{{item.value}}</h3>\\n                                <div>{{profile.details[item.key]}}</div>\\n                            </ion-label>\\n                        </ion-item>\\n                    </ion-list>\\n                </ion-slide>\\n                <ion-slide>\\n                    <ion-list class=\\\"app-list\\\">\\n                        <ion-list-header>\\n                            <ion-label>Residenza</ion-label>\\n                        </ion-list-header>\\n                        <ion-item *ngFor=\\\"let item of homeTranslation | keyvalue: noSort\\\">\\n                            <ion-label>\\n                                <h3>{{item.value}}</h3>\\n                                <div>{{profile.residence[item.key]}}</div>\\n                            </ion-label>\\n                        </ion-item>\\n                        <div *ngIf=\\\"!profile.isResEqualDom\\\">\\n                            <ion-list-header>\\n                                <ion-label>Domicilio</ion-label>\\n                            </ion-list-header>\\n                            <ion-item *ngFor=\\\"let item of homeTranslation | keyvalue: noSort\\\">\\n                                <ion-label>\\n                                    <h3>{{item.value}}</h3>\\n                                    <div>{{profile.domicile[item.key]}}</div>\\n                                </ion-label>\\n                            </ion-item>\\n                        </div>\\n                    </ion-list>\\n                </ion-slide>\\n            </ion-slides>\\n        </div>\\n    </div>\\n</ion-content>\\n\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { IonSegment, IonSlides } from '@ionic/angular';\r\nimport { Profile } from 'src/app/interfaces/profile';\r\nimport { ProfileDetails } from 'src/app/interfaces/profile-details';\r\nimport { ProfileService } from 'src/app/services/esse3/profile/profile.service';\r\nimport { UserService } from 'src/app/services/user/user.service';\r\n\r\n@Component({\r\n    selector: 'app-profile',\r\n    templateUrl: './profile.page.html',\r\n    styleUrls: ['./profile.page.scss'],\r\n})\r\nexport class ProfilePage implements OnInit {\r\n    @ViewChild(IonSlides) slides: IonSlides;\r\n    @ViewChild(IonSegment) segment: IonSegment;\r\n\r\n    private persId: number;\r\n    private isReady: boolean;\r\n    private activeIndex: number;\r\n    private labels: String[];\r\n    private slideOpts: any;\r\n    private profile: Profile;\r\n    private detailsTranslation: any;\r\n    private homeTranslation: any;\r\n\r\n    constructor(\r\n        private userService: UserService,\r\n        private profileService: ProfileService\r\n    ) {\r\n        this.labels = ['Anagrafica', 'Abitazione'];\r\n        this.activeIndex = 0;\r\n        this.isReady = false;\r\n        this.slideOpts = {\r\n            autoHeight: true,\r\n            spaceBetween: 20\r\n        };\r\n\r\n        this.detailsTranslation = {\r\n            firstname: 'nome',\r\n            lastname: 'cognome',\r\n            gender: 'sesso',\r\n            birthDate: 'data di nascita',\r\n            citizenship: 'cittadinanza',\r\n            birthCountry: 'nazione di nascita',\r\n            birthProvince: 'provincia di nascita',\r\n            birthDistrict: 'comune/città di nascita',\r\n            fiscalCode: 'codice fiscale'\r\n        };\r\n\r\n        this.homeTranslation = {\r\n            nation: 'nazione',\r\n            province: 'provincia',\r\n            district: 'comune/città',\r\n            zipCode: 'CAP',\r\n            address: 'indirizzo',\r\n            streetNumber: 'n° civico',\r\n            phone: 'telefono'\r\n        };\r\n\r\n        this.getProfile = this.getProfile.bind(this);\r\n    }\r\n\r\n    async ngOnInit() {\r\n        const profile = await this.userService.getUser();\r\n\r\n        this.persId = profile.user.persId;\r\n        this.getProfile();\r\n    }\r\n\r\n    /**\r\n     * Recupera i dati dell'utenti relativi all'anagrafica e alla residenza / domicilio.\r\n     */\r\n    private getProfile() {\r\n        return this.profileService.getProfile(this.persId)\r\n            .subscribe((profile: Profile) => {\r\n                this.isReady = true;\r\n                this.profile = profile;\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Non imposta alcun tipo di ordinamento sull'oggetto.\r\n     */\r\n    private noSort() {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Aggiorna la slide alla pressione in base allo specifico Segment Button.\r\n     * \r\n     * @param event L'evento associato al Segment Button.\r\n     */\r\n    private async slideTo(event: CustomEvent) {\r\n        const target = event.target as HTMLIonSegmentButtonElement;\r\n        const value = parseInt(target.value);\r\n\r\n        await this.slides.slideTo(value);\r\n        this.activeIndex = value;\r\n    }\r\n\r\n    /**\r\n     * Aggiorna il Segment Button sulla base dell'indice corrente della slide.\r\n     */\r\n    private async setActiveIndex() {\r\n        const index = await this.slides.getActiveIndex();\r\n\r\n        if (index !== this.activeIndex) {\r\n            const button = this.segment['el'].children[index] as HTMLElement;\r\n            button.click();\r\n        }\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ProfilePage } from './profile.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ProfilePage\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class ProfilePageRoutingModule { }\r\n"]}