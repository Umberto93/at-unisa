{"version":3,"sources":["webpack:///src/app/pages/agendaweb/rooms/components/event-modal/event-modal.component.ts","webpack:///src/app/pages/agendaweb/rooms/rooms.page.scss","webpack:///src/app/pages/agendaweb/rooms/rooms.page.ts","webpack:///src/app/pages/agendaweb/rooms/rooms.page.html","webpack:///src/app/pages/agendaweb/rooms/rooms-routing.module.ts","webpack:///src/app/pages/agendaweb/rooms/rooms.module.ts","webpack:///src/app/pages/agendaweb/rooms/components/event-modal/event-modal.component.html","webpack:///src/app/pages/agendaweb/rooms/components/event-modal/event-modal.component.scss","webpack:///src/app/services/agendaweb/rooms/rooms.service.ts"],"names":["EventModalComponent","navParams","events","get","selector","template","RoomsPage","formBuilder","roomsService","modalController","customActionSheetOptions","cssClass","header","mode","slideOpts","autoHeight","spaceBetween","pickerOptions","labels","activeIndex","isReady","buildings","rooms","roomsForm","group","building","required","date","getRoomsFilter","bind","event","target","value","parseInt","slides","slideTo","getActiveIndex","index","button","segment","children","click","Date","toLocaleDateString","replace","Object","keys","length","subscribe","res","getRooms","toLocalDateString","setTimeout","create","component","componentProps","modal","present","routes","path","RoomsPageRoutingModule","imports","forChild","exports","RoomsPageModule","declarations","RoomsService","http","base","easycourseApi","JSON","parse","split","params","set","responseType","pipe","parseResponse","forEach","CodiceAula","room","name","NomeAula","code","timeSlots","from","timestamp_from","to","timestamp_to","nome","trim","type","tipo","profs","Utenti","map","user","firstname","Nome","lastname","Cognome","mail","Mail","push","providedIn"],"mappings":"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","file":"rooms-rooms-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { NavParams } from '@ionic/angular';\r\nimport { RoomEvent } from 'src/app/interfaces/room-event';\r\n\r\n@Component({\r\n    selector: 'app-event-modal',\r\n    templateUrl: './event-modal.component.html',\r\n    styleUrls: ['./event-modal.component.scss'],\r\n})\r\nexport class EventModalComponent implements OnInit {\r\n\r\n    private events: RoomEvent[];\r\n\r\n    constructor(\r\n        private navParams: NavParams\r\n    ) {\r\n        this.events = navParams.get('events');\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n}\r\n","export default \"ion-slide:first-child ion-item::part(native) {\\n  align-items: flex-start;\\n  flex-direction: column;\\n}\\nion-slide:first-child ion-label {\\n  transform: scale(1);\\n  font-size: 16px;\\n  font-weight: var(--ion-font-weight-semibold);\\n}\\nion-slide form {\\n  width: 100%;\\n}\\n.app-list {\\n  margin-bottom: 30px;\\n}\\n.app-list ion-select {\\n  padding: 0;\\n  font-size: 14px;\\n}\\n.app-list ion-select::part(placeholder) {\\n  color: var(--ion-color-unisa-base);\\n  opacity: 1;\\n}\\n.app-list ion-select::part(icon) {\\n  display: none;\\n}\\n.app-list ion-datetime {\\n  padding: 0;\\n  color: var(--ion-color-unisa-base);\\n  font-size: 14px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXGFnZW5kYXdlYi5wYWdlLnNjc3MiLCIuLlxcLi5cXC4uXFwuLlxcLi5cXHJvb21zLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFUTtFQUNJLHVCQUFBO0VBQ0Esc0JBQUE7QUNEWjtBRElRO0VBQ0ksbUJBQUE7RUFDQSxlQUFBO0VBQ0EsNENBQUE7QUNGWjtBRE1JO0VBQ0ksV0FBQTtBQ0pSO0FEUUE7RUFDSSxtQkFBQTtBQ0xKO0FET0k7RUFDSSxVQUFBO0VBQ0EsZUFBQTtBQ0xSO0FET1E7RUFDSSxrQ0FBQTtFQUNBLFVBQUE7QUNMWjtBRFFRO0VBQ0ksYUFBQTtBQ05aO0FEVUk7RUFDSSxVQUFBO0VBQ0Esa0NBQUE7RUFDQSxlQUFBO0FDUlIiLCJmaWxlIjoicm9vbXMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLXNsaWRlIHtcclxuICAgICY6Zmlyc3QtY2hpbGQge1xyXG4gICAgICAgIGlvbi1pdGVtOjpwYXJ0KG5hdGl2ZSkge1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlvbi1sYWJlbCB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IHZhcigtLWlvbi1mb250LXdlaWdodC1zZW1pYm9sZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvcm0ge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG59XHJcblxyXG4uYXBwLWxpc3Qge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuXHJcbiAgICBpb24tc2VsZWN0IHtcclxuICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuXHJcbiAgICAgICAgJjo6cGFydChwbGFjZWhvbGRlcikge1xyXG4gICAgICAgICAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXVuaXNhLWJhc2UpO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJjo6cGFydChpY29uKSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlvbi1kYXRldGltZSB7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXVuaXNhLWJhc2UpO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIH1cclxufVxyXG4iLCJpb24tc2xpZGU6Zmlyc3QtY2hpbGQgaW9uLWl0ZW06OnBhcnQobmF0aXZlKSB7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuaW9uLXNsaWRlOmZpcnN0LWNoaWxkIGlvbi1sYWJlbCB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IHZhcigtLWlvbi1mb250LXdlaWdodC1zZW1pYm9sZCk7XG59XG5pb24tc2xpZGUgZm9ybSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uYXBwLWxpc3Qge1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xufVxuLmFwcC1saXN0IGlvbi1zZWxlY3Qge1xuICBwYWRkaW5nOiAwO1xuICBmb250LXNpemU6IDE0cHg7XG59XG4uYXBwLWxpc3QgaW9uLXNlbGVjdDo6cGFydChwbGFjZWhvbGRlcikge1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXVuaXNhLWJhc2UpO1xuICBvcGFjaXR5OiAxO1xufVxuLmFwcC1saXN0IGlvbi1zZWxlY3Q6OnBhcnQoaWNvbikge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmFwcC1saXN0IGlvbi1kYXRldGltZSB7XG4gIHBhZGRpbmc6IDA7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItdW5pc2EtYmFzZSk7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn0iXX0= */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { IonSegment, IonSlides, ModalController } from '@ionic/angular';\r\nimport { Room } from 'src/app/interfaces/room';\r\nimport { RoomEvent } from 'src/app/interfaces/room-event';\r\nimport { RoomsService } from 'src/app/services/agendaweb/rooms/rooms.service';\r\nimport { EventModalComponent } from './components/event-modal/event-modal.component';\r\n\r\n@Component({\r\n    selector: 'app-rooms',\r\n    templateUrl: './rooms.page.html',\r\n    styleUrls: ['./rooms.page.scss'],\r\n})\r\nexport class RoomsPage implements OnInit {\r\n\r\n    @ViewChild(IonSlides) slides: IonSlides;\r\n    @ViewChild(IonSegment) segment: IonSegment;\r\n\r\n    private readonly customActionSheetOptions: any = {\r\n        cssClass: 'form-select-action-sheet',\r\n        header: 'Seleziona',\r\n        mode: 'md'\r\n    };\r\n\r\n    private readonly slideOpts: any = {\r\n        autoHeight: true,\r\n        spaceBetween: 20\r\n    };\r\n\r\n    private readonly pickerOptions: any = {\r\n        cssClass: 'form-picker'\r\n    };\r\n\r\n    private labels: String[];\r\n    private activeIndex: number;\r\n    private roomsForm: FormGroup;\r\n    private isReady: boolean;\r\n    private buildings: any[];\r\n    private rooms: { [id: string]: Room };\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private roomsService: RoomsService,\r\n        private modalController: ModalController\r\n    ) {\r\n        this.labels = ['Ricerca', 'Riepilogo'];\r\n        this.activeIndex = 0;\r\n        this.isReady = false;\r\n        this.buildings = [];\r\n        this.rooms = {} as { [id: string]: Room };\r\n\r\n        this.roomsForm = this.formBuilder.group({\r\n            building: new FormControl('', Validators.required),\r\n            date: new FormControl('', Validators.required)\r\n        });\r\n\r\n        this.getRoomsFilter = this.getRoomsFilter.bind(this);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getRoomsFilter();\r\n    }\r\n\r\n    /**\r\n     * Aggiorna la slide alla pressione in base allo specifico Segment Button.\r\n     * \r\n     * @param event L'evento associato al Segment Button.\r\n     */\r\n    private async slideTo(event: CustomEvent) {\r\n        const target = event.target as HTMLIonSegmentButtonElement;\r\n        const value = parseInt(target.value);\r\n\r\n        await this.slides.slideTo(value);\r\n        this.activeIndex = value;\r\n    }\r\n\r\n    /**\r\n     * Aggiorna il Segment Button sulla base dell'indice corrente della slide.\r\n     */\r\n    private async setActiveIndex() {\r\n        const index = await this.slides.getActiveIndex();\r\n\r\n        if (index !== this.activeIndex) {\r\n            const button = this.segment['el'].children[index] as HTMLElement;\r\n            button.click();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trasforma la data nel formato locale (italiano DD/MM/YYYY).\r\n     * \r\n     * @param date La data da manipolare.\r\n     */\r\n    private toLocalDateString(date: string) {\r\n        return new Date(date).toLocaleDateString().replace(/\\//g, '-');\r\n    }\r\n\r\n    /**\r\n     * Verifica se l'oggetto rooms è vuoto.\r\n     */\r\n    private roomsIsEmpty() {\r\n        return !Object.keys(this.rooms).length;\r\n    }\r\n\r\n    /**\r\n     * Recupera le combo di filtraggio.\r\n     */\r\n    private getRoomsFilter() {\r\n        return this.roomsService.getRoomsFilter()\r\n            .subscribe((res: any) => {\r\n                this.isReady = true;\r\n                this.buildings = res;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Recupera l'elenco delle aule e dei relativi eventi ad esse associati.\r\n     */\r\n    private getRooms() {\r\n        this.roomsService.getRooms(\r\n            this.roomsForm.value.building,\r\n            this.toLocalDateString(this.roomsForm.value.date)\r\n        ).subscribe((res: { [id: string]: Room }) => {\r\n            this.rooms = res;\r\n            setTimeout(() => {\r\n                this.activeIndex++;\r\n                this.slides.slideTo(this.activeIndex);\r\n            }, 300);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Mostra un modale contenente gli eventi relativi ad una specifica aula.\r\n     * \r\n     * @param events La lista degli eventi.\r\n     */\r\n    private async getRoomEvents(events: RoomEvent[]) {\r\n        const modal = await this.modalController.create({\r\n            component: EventModalComponent,\r\n            componentProps: {\r\n                events: events\r\n            },\r\n            cssClass: 'app-modal'\r\n        });\r\n\r\n        return await modal.present();\r\n    }\r\n\r\n}\r\n","export default \"<ion-content class=\\\"page-content\\\">\\r\\n    <app-refresher [refreshCallback]=\\\"getRoomsFilter\\\"></app-refresher>\\r\\n    <div class=\\\"flex flex-direction-column\\\">\\r\\n        <app-header>\\r\\n            <ion-toolbar>\\r\\n                <ion-title class=\\\"page-title\\\">Aule</ion-title>\\r\\n            </ion-toolbar>\\r\\n            <ion-toolbar class=\\\"segment-toolbar\\\">\\r\\n                <ion-segment\\r\\n                    [value]=\\\"activeIndex\\\"\\r\\n                    (ionChange)=\\\"slideTo($event)\\\"\\r\\n                    swipeGesture=\\\"false\\\"\\r\\n                >\\r\\n                    <ion-segment-button\\r\\n                        *ngFor=\\\"let label of labels; index as i\\\"\\r\\n                        [value]=\\\"i\\\"\\r\\n                    >\\r\\n                        <ion-label>{{label}}</ion-label>\\r\\n                    </ion-segment-button>\\r\\n                </ion-segment>\\r\\n            </ion-toolbar>\\r\\n        </app-header>\\r\\n        <div class=\\\"page-main\\\">\\r\\n            <ion-slides\\r\\n                *ngIf=\\\"isReady\\\"\\r\\n                (ionSlideWillChange)=\\\"setActiveIndex()\\\"\\r\\n                [options]=\\\"slideOpts\\\"\\r\\n            >\\r\\n                <ion-slide>\\r\\n                    <form\\r\\n                        [formGroup]=\\\"roomsForm\\\"\\r\\n                        (submit)=\\\"getRooms()\\\"\\r\\n                    >\\r\\n                        <ion-list class=\\\"app-list\\\">\\r\\n                            <ion-item>\\r\\n                                <ion-label>\\r\\n                                    <h3>Edificio</h3>\\r\\n                                </ion-label>\\r\\n                                <ion-select\\r\\n                                    cancelText=\\\"Cancella\\\"\\r\\n                                    formControlName=\\\"building\\\"\\r\\n                                    interface=\\\"action-sheet\\\"\\r\\n                                    placeholder=\\\"Seleziona\\\"\\r\\n                                    [interfaceOptions]=\\\"customActionSheetOptions\\\"\\r\\n                                >\\r\\n                                    <ion-select-option\\r\\n                                        *ngFor=\\\"let building of buildings; index as i\\\"\\r\\n                                        [value]=\\\"building.valore\\\"\\r\\n                                    >\\r\\n                                        {{building.label}}\\r\\n                                    </ion-select-option>\\r\\n                                </ion-select>\\r\\n                            </ion-item>\\r\\n                            <ion-item>\\r\\n                                <ion-label>\\r\\n                                    <h3>Data</h3>\\r\\n                                </ion-label>\\r\\n                                <ion-datetime\\r\\n                                    cancelText=\\\"Cancella\\\"\\r\\n                                    displayFormat=\\\"DD-MM-YYYY\\\"\\r\\n                                    doneText=\\\"Ok\\\"\\r\\n                                    formControlName=\\\"date\\\"\\r\\n                                    mode=\\\"md\\\"\\r\\n                                    placeholder=\\\"Seleziona\\\"\\r\\n                                    [pickerOptions]=\\\"pickerOptions\\\"\\r\\n                                ></ion-datetime>\\r\\n                            </ion-item>\\r\\n                        </ion-list>\\r\\n                        <ion-button\\r\\n                            class=\\\"form-submit form-submit--button\\\"\\r\\n                            type=\\\"submit\\\"\\r\\n                            [disabled]=\\\"!roomsForm.valid\\\"\\r\\n                        >\\r\\n                            Cerca\\r\\n                        </ion-button>\\r\\n                    </form>\\r\\n                </ion-slide>\\r\\n                <ion-slide>\\r\\n                    <ion-list class=\\\"app-list\\\">\\r\\n                        <ion-item\\r\\n                            *ngFor=\\\"let room of rooms | keyvalue\\\"\\r\\n                            (click)=\\\"getRoomEvents(room.value.events)\\\"\\r\\n                        >\\r\\n                            <ion-label>\\r\\n                                <h3>Aula {{room.value.name}}</h3>\\r\\n                                <div>\\r\\n                                    <i class=\\\"fas fa-clock\\\"></i>\\r\\n                                    <div>\\r\\n                                        <span *ngFor=\\\"let slot of room.value.timeSlots\\\">\\r\\n                                            {{slot.from | date:'HH:mm'}} - {{slot.to  | date:'HH:mm'}}\\r\\n                                        </span>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </ion-label>\\r\\n                        </ion-item>\\r\\n                        <ion-item *ngIf=\\\"roomsIsEmpty()\\\">\\r\\n                            Nessun elemento da mostrare.\\r\\n                        </ion-item>\\r\\n                    </ion-list>\\r\\n                </ion-slide>\\r\\n            </ion-slides>\\r\\n        </div>\\r\\n    </div>\\r\\n</ion-content>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RoomsPage } from './rooms.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RoomsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RoomsPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RoomsPageRoutingModule } from './rooms-routing.module';\r\n\r\nimport { RoomsPage } from './rooms.page';\r\nimport { UtilityModule } from '../../utility/utility.module';\r\nimport { EventModalComponent } from './components/event-modal/event-modal.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        IonicModule,\r\n        RoomsPageRoutingModule,\r\n        UtilityModule,\r\n    ],\r\n    declarations: [\r\n        RoomsPage,\r\n        EventModalComponent\r\n    ],\r\n    exports: [\r\n        EventModalComponent\r\n    ]\r\n})\r\nexport class RoomsPageModule { }\r\n","export default \"<app-modal title=\\\"Eventi\\\">\\r\\n    <ion-list>\\r\\n        <ion-item *ngFor=\\\"let event of events\\\">\\r\\n            <ion-label>\\r\\n                <h3>{{event.name}}</h3>\\r\\n                <div>\\r\\n                    <i class=\\\"fas fa-tag\\\"></i>\\r\\n                    <span>{{event.type}}</span>\\r\\n                </div>\\r\\n                <div>\\r\\n                    <i class=\\\"fas fa-clock\\\"></i>\\r\\n                    <span>\\r\\n                        {{event.from | date:'HH:mm'}} - {{event.to  | date:'HH:mm'}}\\r\\n                    </span>\\r\\n                </div>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n    </ion-list>\\r\\n</app-modal>\\r\\n\";","export default \"ion-item {\\n  margin-bottom: 30px;\\n}\\nion-item:last-child {\\n  margin-bottom: 0;\\n}\\nion-item ion-label h3 {\\n  overflow: visible;\\n  margin-top: 0;\\n  margin-bottom: 10px;\\n  color: var(--ion-color-unisa-blue);\\n  font-size: 16px;\\n  font-weight: var(--ion-font-weight-semibold);\\n  text-transform: lowercase;\\n  text-overflow: initial;\\n  white-space: initial;\\n}\\nion-item ion-label h3::first-letter {\\n  text-transform: uppercase;\\n}\\nion-item ion-label div:not(:last-child) {\\n  margin-bottom: 5px;\\n}\\nion-item ion-label span {\\n  margin-left: 10px;\\n  font-size: 14px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXC4uXFxldmVudC1tb2RhbC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLG1CQUFBO0FBQ0o7QUFDSTtFQUNJLGdCQUFBO0FBQ1I7QUFHUTtFQUNJLGlCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0Esa0NBQUE7RUFDQSxlQUFBO0VBQ0EsNENBQUE7RUFDQSx5QkFBQTtFQUNBLHNCQUFBO0VBQ0Esb0JBQUE7QUFEWjtBQUdZO0VBQ0kseUJBQUE7QUFEaEI7QUFLUTtFQUNJLGtCQUFBO0FBSFo7QUFNUTtFQUNJLGlCQUFBO0VBQ0EsZUFBQTtBQUpaIiwiZmlsZSI6ImV2ZW50LW1vZGFsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWl0ZW0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuXHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaW9uLWxhYmVsIHtcclxuICAgICAgICBoMyB7XHJcbiAgICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgICAgICAgICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXVuaXNhLWJsdWUpO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1pb24tZm9udC13ZWlnaHQtc2VtaWJvbGQpO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xyXG4gICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBpbml0aWFsO1xyXG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogaW5pdGlhbDtcclxuXHJcbiAgICAgICAgICAgICY6OmZpcnN0LWxldHRlciB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXY6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNwYW4ge1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0= */\";","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Room } from 'src/app/interfaces/room';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RoomsService {\r\n\r\n    private readonly base = `${environment.easycourseApi}/AgendaStudenti/`;\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    private parseResponse(res: any): String {\r\n        return JSON.parse(res.split(';')[0]);\r\n    }\r\n\r\n    /**\r\n     * Preleva le combo di filtraggio per la selezione delle aule.\r\n     */\r\n    getRoomsFilter(): Observable<any> {\r\n        return this.http.get(`${this.base}/combo_call_new.php`, {\r\n            params: new HttpParams()\r\n                .set('sw', 'rooms_'),\r\n            responseType: 'text'\r\n        }).pipe(\r\n            map((res: any) => {\r\n                return this.parseResponse(res);\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Preleva l'elenco delle aule con le relative attività durante la specifica giornata.\r\n     * \r\n     * @param building Il codice dell'edificio.\r\n     * @param date La data.\r\n     */\r\n    getRooms(building: string, date: string): Observable<{ [id: string]: Room }> {\r\n        return this.http.get(`${this.base}/rooms_call_new.php`, {\r\n            params: new HttpParams()\r\n                .set('view', 'rooms')\r\n                .set('include', 'rooms')\r\n                .set('sede', building)\r\n                .set('date', date)\r\n        }).pipe(\r\n            map((res: any) => {\r\n                const events = res.events;\r\n                const rooms = {} as { [id: string]: Room };\r\n\r\n                events.forEach((event: any) => {\r\n                    if (!(event.CodiceAula in rooms)) {\r\n                        const room = {} as Room;\r\n\r\n                        room.name = event.NomeAula;\r\n                        room.code = event.CodiceAula;\r\n                        room.timeSlots = [{\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        }];\r\n                        room.events = [{\r\n                            name: event.nome.replace('<i class=\"fa fa-asterisk\" aria-hidden title=\"*\"></i>', '').trim(),\r\n                            type: event.tipo,\r\n                            profs: event.Utenti.map((user: any) => ({\r\n                                firstname: user.Nome,\r\n                                lastname: user.Cognome,\r\n                                mail: user.Mail\r\n                            })),\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        }];\r\n\r\n                        rooms[event.CodiceAula] = room;\r\n                    } else {\r\n                        rooms[event.CodiceAula].timeSlots.push({\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        });\r\n\r\n                        rooms[event.CodiceAula].events.push({\r\n                            name: event.nome.replace('<i class=\"fa fa-asterisk\" aria-hidden title=\"*\"></i>', '').trim(),\r\n                            type: event.tipo,\r\n                            profs: event.Utenti.map((user: any) => ({\r\n                                firstname: user.Nome,\r\n                                lastname: user.Cognome,\r\n                                mail: user.Mail\r\n                            })),\r\n                            from: new Date(event.timestamp_from * 1000),\r\n                            to: new Date(event.timestamp_to * 1000)\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return rooms;\r\n            })\r\n        );\r\n    }\r\n}\r\n"]}