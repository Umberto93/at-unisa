{"version":3,"sources":["webpack:///src/app/pages/login/login.module.ts","webpack:///src/app/pages/login/login.page.scss","webpack:///src/app/pages/login/login.page.html","webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/pages/login/login.page.ts","webpack:///src/app/services/auth.service.ts"],"names":["LoginPageModule","imports","declarations","routes","path","component","LoginPageRoutingModule","forChild","exports","LoginPage","router","formBuilder","auth","toastService","loginForm","group","username","compose","required","pattern","password","showPassword","reset","valid","loginSubscription","loginWithCredentials","value","subscribe","err","presentSuccessToast","message","navigateByUrl","selector","template","AuthService","http","userService","credentials","btoa","get","esse3Api","headers","pipe","user","setUser","setCredentials","setActiveCareer","providedIn"],"mappings":"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","file":"pages-login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\n\r\nimport { LoginPage } from './login.page';\r\nimport { UtilityModule } from '../utility/utility.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        IonicModule,\r\n        LoginPageRoutingModule,\r\n        UtilityModule\r\n    ],\r\n    declarations: [LoginPage]\r\n})\r\nexport class LoginPageModule { }\r\n","export default \".page-title {\\n  margin: 47px 0;\\n}\\n\\nion-img {\\n  height: 150px;\\n}\\n\\nform ion-list {\\n  padding-top: 0;\\n  padding-bottom: 0;\\n}\\n\\n.form-control {\\n  margin-bottom: 30px;\\n}\\n\\n.form-control ion-input {\\n  --padding-start: 20px;\\n  font-size: 14px;\\n}\\n\\n.form-control__icon:last-of-type {\\n  cursor: pointer;\\n}\\n\\n.form-options {\\n  --min-height: auto;\\n  font-size: 14px;\\n}\\n\\n.form-options ion-checkbox {\\n  margin-right: 10px;\\n}\\n\\n.form-submit--round {\\n  display: block;\\n  height: 60px;\\n  width: 60px;\\n  margin-top: 47px;\\n  margin-left: auto;\\n  --border-radius: 50%;\\n  transition: opacity var(--ion-transition-fast);\\n}\\n\\n.form-submit__icon {\\n  color: white;\\n  font-size: 18px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFxsb2dpbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0FBQ0o7O0FBR0k7RUFDSSxjQUFBO0VBQ0EsaUJBQUE7QUFBUjs7QUFJQTtFQUNJLG1CQUFBO0FBREo7O0FBR0k7RUFDSSxxQkFBQTtFQUNBLGVBQUE7QUFEUjs7QUFLQTtFQUNJLGVBQUE7QUFGSjs7QUFLQTtFQUNJLGtCQUFBO0VBQ0EsZUFBQTtBQUZKOztBQUlJO0VBQ0ksa0JBQUE7QUFGUjs7QUFNQTtFQUdJLGNBQUE7RUFDQSxZQUhPO0VBSVAsV0FKTztFQUtQLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxvQkFBQTtFQUVBLDhDQUFBO0FBTko7O0FBU0E7RUFDSSxZQUFBO0VBQ0EsZUFBQTtBQU5KIiwiZmlsZSI6ImxvZ2luLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wYWdlLXRpdGxlIHtcclxuICAgIG1hcmdpbjogNDdweCAwO1xyXG59XHJcblxyXG5pb24taW1nIHtcclxuICAgIGhlaWdodDogMTUwcHg7XHJcbn1cclxuXHJcbmZvcm0ge1xyXG4gICAgaW9uLWxpc3Qge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAwO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xyXG4gICAgfSAgICBcclxufVxyXG5cclxuLmZvcm0tY29udHJvbCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG5cclxuICAgIGlvbi1pbnB1dCB7XHJcbiAgICAgICAgLS1wYWRkaW5nLXN0YXJ0OiAyMHB4O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIH1cclxufVxyXG5cclxuLmZvcm0tY29udHJvbF9faWNvbjpsYXN0LW9mLXR5cGUge1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4uZm9ybS1vcHRpb25zIHtcclxuICAgIC0tbWluLWhlaWdodDogYXV0bztcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuXHJcbiAgICBpb24tY2hlY2tib3gge1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcclxuICAgIH1cclxufVxyXG5cclxuLmZvcm0tc3VibWl0LS1yb3VuZCB7XHJcbiAgICAkc2l6ZTogNjBweDtcclxuXHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGhlaWdodDogJHNpemU7XHJcbiAgICB3aWR0aDogJHNpemU7XHJcbiAgICBtYXJnaW4tdG9wOiA0N3B4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICAtLWJvcmRlci1yYWRpdXM6IDUwJTtcclxuXHJcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLWlvbi10cmFuc2l0aW9uLWZhc3QpO1xyXG59XHJcblxyXG4uZm9ybS1zdWJtaXRfX2ljb24ge1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG59XHJcbiJdfQ== */\";","export default \"<ion-content class=\\\"ion-align-self-center\\\">\\r\\n    <div class=\\\"flex flex-direction-column\\\">\\r\\n        <app-header></app-header>\\r\\n        <div class=\\\"container\\\">\\r\\n            <ion-img src=\\\"../../assets/icon/icon.png\\\"></ion-img>\\r\\n            <h1 class=\\\"page-title\\\">Accedi</h1>\\r\\n            <form\\r\\n                [formGroup]=\\\"loginForm\\\"\\r\\n                (submit)=\\\"login()\\\"\\r\\n                (keyup.enter)=\\\"login()\\\"\\r\\n            >\\r\\n                <ion-list>\\r\\n                    <ion-item class=\\\"form-control form-control--text\\\">\\r\\n                        <i class=\\\"fas fa-user  form-control__icon\\\"></i>\\r\\n                        <ion-input\\r\\n                            placeholder=\\\"Username (es. m.rossi)\\\"\\r\\n                            formControlName=\\\"username\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            required\\r\\n                        ></ion-input>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"form-control form-control--text\\\">\\r\\n                        <i class=\\\"fas fa-lock form-control__icon\\\"></i>\\r\\n                        <ion-input\\r\\n                            placeholder=\\\"Password\\\"\\r\\n                            formControlName=\\\"password\\\"\\r\\n                            [type]=\\\"showPassword ? 'text' : 'password'\\\"\\r\\n                            required\\r\\n                        ></ion-input>\\r\\n                        <i\\r\\n                            class=\\\"fas form-control__icon\\\"\\r\\n                            [class.fa-eye]=\\\"!showPassword\\\"\\r\\n                            [class.fa-eye-slash]=\\\"showPassword\\\"\\r\\n                            (click)=\\\"showPassword = !showPassword\\\"\\r\\n                        ></i>\\r\\n                    </ion-item>\\r\\n                </ion-list>\\r\\n                <ion-button\\r\\n                    class=\\\"ion-no-margin form-submit form-submit--round\\\"\\r\\n                    type=\\\"submit\\\"\\r\\n                    [disabled]=\\\"!loginForm.valid\\\"\\r\\n                >\\r\\n                    <i class=\\\"fas fa-arrow-right form-submit__icon\\\"></i>\\r\\n                </ion-button>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</ion-content>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginPage\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule { }\r\n","import { Subscription } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { ToastService } from 'src/app/services/toast/toast.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.page.html',\r\n    styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage implements OnInit {\r\n\r\n    private loginForm: FormGroup;\r\n    private loginSubscription: Subscription;\r\n    private showPassword: boolean;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private formBuilder: FormBuilder,\r\n        private auth: AuthService,\r\n        private toastService: ToastService\r\n    ) {\r\n        this.loginForm = this.formBuilder.group({\r\n            username: new FormControl('', Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern(/^[a-z]{1}\\.[a-z0-9]+$/i)\r\n            ])),\r\n            password: new FormControl('', Validators.required)\r\n        });\r\n        this.showPassword = false;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ionViewWillEnter() {\r\n        this.loginForm.reset();\r\n        //this.loginSubscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Effettua il login se e solo se i dati inseriti rispettano le condizioni imposte dai\r\n     * Validators.\r\n     */\r\n    private login() {\r\n        if (this.loginForm.valid) {\r\n            this.loginSubscription = this.auth.loginWithCredentials(\r\n                this.loginForm.value.username,\r\n                this.loginForm.value.password\r\n            ).subscribe(\r\n                () => { },\r\n                err => {\r\n                    throw err;\r\n                },\r\n                () => {\r\n                    this.toastService.presentSuccessToast({\r\n                        message: 'Login effettuato con successo!'\r\n                    });\r\n                    this.router.navigateByUrl('/home');\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cambia l'input da password a testuale o viceversa permettendo all'utente di poter vedere la\r\n     * propria password durante la digitazione.\r\n     */\r\n    private togglePassword() {\r\n        this.showPassword = !this.showPassword;\r\n    }\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { UserService } from './user/user.service';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private userService: UserService,\r\n    ) { }\r\n\r\n    /**\r\n     * Effettua il login utilizzando le credenziali inserite dall'utente.\r\n     * \r\n     * Il metodo di autenticazione è detto \"Basic Authentication\" e prevede che le credenziali\r\n     * vengano inviate in un formato standard \"username:password\". La stringa risultante viene poi\r\n     * codificata in Base64 e inserita all'interno dell'header \"Authorization\".\r\n     * \r\n     * NB: Codificare in Base64 non significa effettuare l'hash o la cifratura della stringa. \r\n     * Essendo reversibile, questa procedura equivale al mandare le credenziali in chiaro! Ecco\r\n     * perché è preferibile utilizzarla in combinazione con un protocollo sicuro come HTTPS. \r\n     * Dal momento che l'UNISA non ha ancora a disposizione meccanismi per la gestione del login\r\n     * che sfruttano protocolli come OAuth2, abbiamo deciso di optare per questa strada.\r\n     * \r\n     * Se il processo di autenticazione va a buon fine, i dati dell'utente vengono memorizzati nello\r\n     * Ionic Storage assieme alle credenziali precedentemente inviate per la richiesta.\r\n     * \r\n     * @param username Lo username dell'utente.\r\n     * @param password La passweord dell'utente.\r\n     */\r\n    loginWithCredentials(\r\n        username: string,\r\n        password: string\r\n    ): Observable<any> {\r\n        const credentials = btoa(`${username}:${password}`);\r\n\r\n        return this.http.get(`${environment.esse3Api}/login`, {\r\n            headers: new HttpHeaders({\r\n                'Authorization': `Basic ${credentials}`\r\n            })\r\n        }).pipe(map(user => {\r\n            if (user) {\r\n                this.userService.setUser(user);\r\n                this.userService.setCredentials(credentials);\r\n                this.userService.setActiveCareer(0);\r\n                return user;\r\n            }\r\n\r\n            return null;\r\n        }));\r\n    }\r\n\r\n}\r\n"]}